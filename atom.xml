<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>No Spoon</title>
  
  <subtitle>flyingpot&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-24T12:31:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Fan Jingbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/11/23/Boyer-Moore%20Majority%20Vote%E7%AE%97%E6%B3%95%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/11/23/Boyer-Moore Majority Vote算法及相关算法题/</id>
    <published>2017-11-23T12:32:54.000Z</published>
    <updated>2017-11-24T12:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Boyer-Moore-Majority-Vote算法及相关算法题"><a href="#Boyer-Moore-Majority-Vote算法及相关算法题" class="headerlink" title="Boyer-Moore Majority Vote算法及相关算法题"></a>Boyer-Moore Majority Vote算法及相关算法题</h1><h2 id="一、算法简介"><a href="#一、算法简介" class="headerlink" title="一、算法简介"></a>一、算法简介</h2><p>Boyer-Moore Majority Vote算法（以下简称BMMV算法）是用来在一系列元素中查找主要元素的算法，具有O(n)的时间复杂度和O(1)的空间复杂度。该算法在1981年由Robert S. Boyer和J Strother Moore提出。</p><blockquote><p>Tips: Robert S. Boyer和J Strother Moore两人在1977年提出了Boyer-Moore字符串搜索算法，也是一个很经典的算法</p></blockquote><h2 id="二、问题描述"><a href="#二、问题描述" class="headerlink" title="二、问题描述"></a>二、问题描述</h2><h3 id="1-Leetcode-169-Majority-Element"><a href="#1-Leetcode-169-Majority-Element" class="headerlink" title="1. Leetcode 169 (Majority Element)"></a>1. Leetcode 169 (Majority Element)</h3><blockquote><p>给定含有$n$个元素的数组，寻找其主元素（出现超过$n/2$下界次的元素）</p></blockquote><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a><strong>题解：</strong></h4><p>  本题有多种解法，排序，哈希表都可以AC。先说一下比较巧妙的排序法。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">      <span class="keyword">return</span> sorted(nums)[len(nums)//<span class="number">2</span>]</div></pre></td></tr></table></figure><p>  主要原理就是，只要主元素存在，数组索引为len(nums)//2处的值一定是主元素（对于奇数长度的数组，中位数一定是主元素；对于偶数长度的数组，中间的两个数一定都是主元素）。</p><p>  哈希表的方法见下文。</p><p>  下面是BMMV算法的实现代码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">      count = <span class="number">0</span></div><div class="line">      candidate = <span class="keyword">None</span></div><div class="line"></div><div class="line">      <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">          <span class="keyword">if</span> count == <span class="number">0</span>:</div><div class="line">              candidate = num</div><div class="line">          count += (<span class="number">1</span> <span class="keyword">if</span> num == candidate <span class="keyword">else</span> <span class="number">-1</span>)</div><div class="line">          </div><div class="line">      <span class="keyword">return</span> candidate</div></pre></td></tr></table></figure><p>  可以看出，BMMV算法思想很简单，初始化count为0，每当count为0时，candidate为数组中下一个数，遍历数组，如果数等于candidate，则count加一，否则减一，最后返回candidate即为主元素</p><h3 id="2-Leetcode-229-Majority-Element-II"><a href="#2-Leetcode-229-Majority-Element-II" class="headerlink" title="2. Leetcode 229 (Majority Element II)"></a>2. Leetcode 229 (Majority Element II)</h3><blockquote><p>给定含有$n$个元素的数组，寻找所有出现超过$n/3$下界次的元素</p></blockquote><h4 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a><strong>题解：</strong></h4><blockquote><p>Tips: 最多存在两个所求元素</p></blockquote><p>BMMV算法代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        count1, count2, candidate1, candidate2 = <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> n == candidate1:</div><div class="line">                count1 += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> n == candidate2:</div><div class="line">                count2 += <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> count1 == <span class="number">0</span>:</div><div class="line">                candidate1, count1 = n, <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> count2 == <span class="number">0</span>:</div><div class="line">                candidate2, count2 = n, <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                count1, count2 = count1 - <span class="number">1</span>, count2 - <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> [n <span class="keyword">for</span> n <span class="keyword">in</span> (candidate1, candidate2)</div><div class="line">                        <span class="keyword">if</span> nums.count(n) &gt; len(nums) // <span class="number">3</span>]</div></pre></td></tr></table></figure><p>类似上一题，由于最多两个元素，所以设两个count和candidate，遍历数组，最后验证两个candidate是否满足题意</p><p>本题依旧可以用哈希表求解，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">        count = collections.Counter(nums)</div><div class="line">        <span class="keyword">return</span> [key <span class="keyword">for</span> (key, value) <span class="keyword">in</span> count.items() <span class="keyword">if</span> value &gt; len(nums) // <span class="number">3</span>]</div></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>BMMV算法可以看做是主元素相关问题的特解，而如果主元素个数要求变到n/k的话，使用BMMV算法无法写出一个通解。这时哈希表可以作为一种通解。</p><h3 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h3><p>Lintcode类似题的主元素个数的下界分别为n/2、n/3、n/k，并且加上了条件”There is only one majority number in the array”，这么一改题目立马变得很low，因为只要找到数组中出现最多的元素就可以了，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">        counts = collections.Counter(nums)</div><div class="line">        <span class="keyword">return</span> max(counts.keys(), key=counts.get)</div></pre></td></tr></table></figure><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>1.<a href="https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html" target="_blank" rel="external">Majority Voting Algorithm</a><br>2.<a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm" target="_blank" rel="external">Boyer–Moore majority vote algorithm (Wiki)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Boyer-Moore-Majority-Vote算法及相关算法题&quot;&gt;&lt;a href=&quot;#Boyer-Moore-Majority-Vote算法及相关算法题&quot; class=&quot;headerlink&quot; title=&quot;Boyer-Moore Majority Vote算
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python路径、$PATH和虚拟环境</title>
    <link href="http://yoursite.com/2017/03/27/Python%E8%B7%AF%E5%BE%84%E3%80%81-PATH%E5%92%8C%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/03/27/Python路径、-PATH和虚拟环境/</id>
    <published>2017-03-27T03:26:05.000Z</published>
    <updated>2017-03-27T12:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>半年前我在运行一个Python程序的时候，发现运行程序报错，而且怎么也解决不了。当时我还不会用git，但即便会用也无计可施，因为我压根就没改过那段程序。依稀记得当时我情绪爆炸，对出现的问题根本没有头绪。</p><p>我的大神室友知道我遇到了问题，在听我说明情况后，轻描淡写地坐下来，打出了一个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">which</span> python</div></pre></td></tr></table></figure><p>然后他看了看输出，问我最近有没有装奇怪的东西，我一脸懵逼，但仔细一想确实装了Anaconda（一个Python的科学计算环境）。但是那是一个星期前的事啊。大神不屑地瞟了我一眼，又问我：“你是不是最近重启过？”我一想确实，那天mac有点卡，实在受不了，所以不得已重启了一下。当我还在懵逼的时候，大神已经开始潇洒地敲打键盘，不一会儿就帮我调试好了。“哇！好棒！”我抱着电脑开始跑起自己的程序，无视掉了旁边准备装逼的大神。。。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>半年过去，Python我也用了不少，但是对于Python包的路径还有像是virtualenv、conda这样的虚拟环境原理还不是很明白，这两天研究了一下，再与当时大神的风骚操作相印证，自己也是明白了一些东西。</p><h3 id="1-which命令"><a href="#1-which命令" class="headerlink" title="1. which命令"></a>1. which命令</h3><p>具体的参数可以<code>man which</code>看，用处就是在环境变量$PATH中找到命令对应的路径。所以<code>which python</code>输出的就是Python命令的路径</p><h3 id="2-python路径"><a href="#2-python路径" class="headerlink" title="2. python路径"></a>2. python路径</h3><p>系统安装的python解释器路径是<code>/usr/bin/python</code>，pyhton包的路径是<code>/usr/lib/python/...</code>，可以这样验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(sys.path)</div><div class="line">[<span class="string">''</span>, <span class="string">'/usr/lib/python36.zip'</span>, <span class="string">'/usr/lib/python3.6'</span>, <span class="string">'/usr/lib/python3.6/lib-dynload'</span>, <span class="string">'/usr/lib/python3.6/site-packages'</span>]</div></pre></td></tr></table></figure><p>在<code>import</code>一个包的时候，python解释器会按照这个list从前往后的顺序来寻找这个包，在前面找到就不会继续找了。</p><h3 id="3-PATH"><a href="#3-PATH" class="headerlink" title="3. $PATH"></a>3. $PATH</h3><p>PATH这个环境变量可以用<code>echo $PATH</code>来输出查看，作用是记录可执行文件的存放路径。和Python导入模块一样，操作系统也是从前往后依次查找的。</p><p>Anaconda会在一个新的地方安装Python环境，如<code>~/anaconda/bin/python</code>和<code>~/anaconda/lib/...</code>，然后在安装过程中会在<code>~/.bashrc</code>这个bash配置文件中加上\$PATH：<code>export PATH=&quot;/home/[username]/anaconda/bin:$PATH&quot;</code>，这样重新打开bash后调用的Python和包就是Anaconda安装的版本了。这也是为什么我当时安装完之后运行Python没有发现异常，但是重启之后出错的原因。</p><h3 id="4-虚拟环境"><a href="#4-虚拟环境" class="headerlink" title="4. 虚拟环境"></a>4. 虚拟环境</h3><p>创建虚拟环境的好处有很多，很重要的一个好处就是可以在不同的环境下跑不同的程序，从而解决包的冲突问题。其实虚拟环境的原理也很简单，就是在一个新路径下创建一个新的Python环境，每次进入虚拟环境，就会在$PATH中加入那个路径，这样调用的就是该路径下的Python环境。这样的话，每个环境都对应自己的路径，冲突问题就被解决了。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ol><li><a href="http://mirnazim.org/writings/python-ecosystem-introduction/" target="_blank" rel="external">Python Ecosystem an Introduction</a></li><li><a href="https://help.ubuntu.com/community/EnvironmentVariables" target="_blank" rel="external">EnvironmentVariables</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;半年前我在运行一个Python程序的时候，发现运行程序报错，而且怎么也解决不了。当时我还不会用git，但即便会用也无计可施，因为我压根就没改过那段程
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld!</title>
    <link href="http://yoursite.com/2017/03/25/HelloWorld/"/>
    <id>http://yoursite.com/2017/03/25/HelloWorld/</id>
    <published>2017-03-25T13:44:03.000Z</published>
    <updated>2017-03-25T13:55:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>我这个人是不太喜欢写文章的，以前也因为种种原因被老爸逼着写过很多随笔，现在想想真的是泪啊。主要可能是因为我对写文章不自信，经常会发现自己读不下去自己刚写的东西，再加上人都是快速成长的，每一个阶段的思想可能变化很大。所以一般来说我读自己过去写的东西时都会十分尴尬，心里会想的是：“WTF！这是哪个智障写的啊？！”</p><p>不过呢，我现在下定决心去写技术博客了。而原因，不是那些老套的所有程序员都能罗列的写技术博客的好处，而是我实在地觉得自己是有必要梳理归纳自己学到的一些东西。毕竟在这样一个信息爆炸，技术更新如此快的时代，再不记录一点东西，真的是要“万花从中过，片页不沾身”了（咦，好像哪里不对。。。）。</p><p>既然决定要写博客，肯定要有一个写作的平台。。首先像是什么新浪博客，CSDN之类的我是肯定不会考虑的，逼格不够，太不geeker了。程序员写博客肯定要自己搭建啊，然后就是WordPress了，我是折腾过的，但后来发现它更适合搭一个个人站，拿它单纯的写写博客不是不可以，但是我不喜欢（其实是我太懒，懒得折腾）。最后我看到了Hexo这个静态博客框架，一下子就被吸引了：有很多好看简介的主题可以使用，markdown书写，再加上可以托管在GitHub这个同性交友网站（误）上，实在是完美。</p><p>选择好了写作的平台，接下来就是写作了。其实我本人在计算机行业，或者说在码农圈，只是个新司机，用NBA的话来说我现在只是一个一年级生。技术栈基本没有，所以要学习的东西还很多，路也还很长啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我这个人是不太喜欢写文章的，以前也因为种种原因被老爸逼着写过很多随笔，现在想想真的是泪啊。主要可能是因为我对写文章不自信，经常会发现自己读不下去自己刚写的东西，再加上人都是快速成长的，每一个阶段的思想可能变化很大。所以一般来说我读自己过去写的东西时都会十分尴尬，心里会想的是
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
